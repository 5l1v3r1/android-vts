package fuzion24.device.vulnerability.vulnerabilities.framework.media;

import android.content.Context;
import android.content.res.AssetManager;
import android.os.Build;
import android.util.Log;

import org.apache.commons.io.FilenameUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import fuzion24.device.vulnerability.vulnerabilities.VulnerabilityTest;

/**
 * Created by fuzion24 on 8/10/15.
 */

public class StageFright {

    private static final String TAG = "StageFright";

    static {
        System.loadLibrary("stagefright");
    }

    private static void exec(String blah) throws Exception {
        Runtime.getRuntime().exec(blah);
    }

    public static List<VulnerabilityTest> getTests(Context context) {
        try {
            File dataDir = context.getFilesDir();

            AssetManager assetManager = context.getAssets();
            final String stageFrightAssetPath = "stagefright/stagefright_media_files";
            String[] stagefrightMediaFiles = assetManager.list(stageFrightAssetPath);

            List<VulnerabilityTest> tests = new ArrayList<VulnerabilityTest>();

            final String extractedBinaryTester = dataDir.getAbsolutePath() + File.separator + getNativeAppName();
            extractAsset(context, "stagefright" + File.separator + getNativeAppName(),
                    extractedBinaryTester);
            exec("chmod 744 " + extractedBinaryTester);

            final String extractedCrashCheck = dataDir.getAbsolutePath() + File.separator + getCrashCheckAppName();
            extractAsset(context, "crashCheck" + File.separator + getCrashCheckAppName(), extractedCrashCheck);
            exec("chmod 744 " + extractedCrashCheck);

            for (final String mediaFile : stagefrightMediaFiles) {

                final String extractedAssetPath = dataDir.getAbsolutePath() + File.separator + mediaFile;

                extractAsset(context,
                        stageFrightAssetPath + File.separator + mediaFile,
                        extractedAssetPath);

                tests.add(new VulnerabilityTest() {
                    @Override
                    public String getName() {
                        return "StageFright: " + FilenameUtils.removeExtension(mediaFile);
                    }

                    @Override
                    public boolean isVulnerable(Context context) throws Exception {
                        TestResult result = testMedia(extractedCrashCheck, extractedBinaryTester, extractedAssetPath);
                        Log.d(StageFright.class.getSimpleName(), "Test result: " + result.result);
                        switch (result) {
                            case OK:    return false;
                            case CRASH: return true;
                            case HANG:  throw new Exception("Test is hanging");
                            case ERROR: throw new Exception("Test error");
                        }
                        return false;
                    }
                });
            }
            return tests;
        }catch(Exception e){
            e.printStackTrace();
        }

        return new ArrayList<>();
    }

    public enum TestResult {
        OK("ok"),
        CRASH("crash"),
        HANG("hang"),
        ERROR("error");

        public final String result;
        TestResult(String result) {
            this.result = result;
        }
    }

    private static TestResult testMedia(String crashy, String binary, String media) throws Exception {
        String[] cmdLine = new String[] { crashy, "5", binary, media };
        Process process = Runtime.getRuntime().exec(cmdLine);
        int result = process.waitFor();

        switch (result) {
            case 0:  return TestResult.OK;
            case 1:  return TestResult.CRASH;
            case 2:  return TestResult.HANG;
            default: return TestResult.ERROR;
        }
    }

    private static final int BUFFER_SIZE = 2 * 1024 * 1024;
    private static void copy(InputStream input, OutputStream output) throws IOException {
        try {
            byte[] buffer = new byte[BUFFER_SIZE];
            int bytesRead = input.read(buffer);
            while (bytesRead != -1) {
                output.write(buffer, 0, bytesRead);
                bytesRead = input.read(buffer);
            }
            //If needed, close streams.
        } finally {
            input.close();
            output.close();
        }
    }

    private static void extractAsset(Context ctx, String name, String destination) throws Exception {
        Log.d(TAG, "Extracting \'" + name + "\' from assets to \'" + destination + "\' ...");

        try {
            File f = new File(destination);
            if(f.exists()) {
                f.delete();
            }
        }
        catch(Exception e) {e.printStackTrace();}

        AssetManager assetManager = ctx.getAssets();
        InputStream asset = assetManager.open(name);
        FileOutputStream fos = new FileOutputStream(destination);
        copy(asset,fos);

    }

    public static String getNativeAppName() {
        return Build.VERSION.SDK_INT >= 16 ? "stagefrightCheck-pie" : "stagefrightCheck";
    }

    public static String getCrashCheckAppName() {
        return Build.VERSION.SDK_INT >= 16 ? "crashCheck-pie" : "crashCheck";
    }

}
