package fuzion24.device.vulnerability.test;

import android.content.Context;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import fuzion24.device.vulnerability.vulnerabilities.VulnerabilityTest;
import fuzion24.device.vulnerability.vulnerabilities.helper.BinaryAssets;

/**
 * Created by fuzion24 on 11/23/15.
 */
public class VulnerabilityDescriptor {
    String CVEorID;
    String description;
    String impact;
    Double CVSSV2Score;
    String CVEDate;
    List<String> externalLinks;
    List<String> altNames;
    List<String> patches;

    private VulnerabilityDescriptor(String cve,
                       String desc,
                       String impact,
                       Double cvssv2,
                       String cveDate,
                                    List<String> externLinks,
                                    List<String> altNames,
                                    List<String> patches) {
        this.CVEorID = cve;
        this.description = desc;
        this.impact = impact;
        this.CVSSV2Score = cvssv2;
        this.CVEDate = cveDate;
        this.externalLinks = externLinks;
        this.altNames = altNames;
        this.patches = patches;
    }

    public static VulnerabilityDescriptor getDescriptorObject(String cve,
                                                                  String desc,
                                                                  String impact,
                                                                  Double cvssv2,
                                                                  String cveDate,
                                                                  String[] externLinks,
                                                                  String[] altNames,
                                                                  String[] patches) {
        VulnerabilityDescriptor vo = new VulnerabilityDescriptor(cve, desc, impact, cvssv2, cveDate, externLinks, altNames, patches);
        return vo;
    }

    private static List<String> extractStringArray(JSONObject obj, String arrayName) throws Exception {
        JSONArray jsonStringArray = obj.getJSONArray(arrayName);
        List<String> items = new ArrayList<String>();
        for (int i = 0; i < jsonStringArray.length(); i++) {
            items.add(jsonStringArray.getString(i));
        }
        return items;
    }


    public static Map<String, VulnerabilityDescriptor> getParsedVulnMap(Context ctx) throws Exception {
        String jsonVulns = BinaryAssets.extractAsset(ctx, "vuln_map.json");
        JSONObject vulnMap = new JSONObject(jsonVulns);

        Map<String, VulnerabilityDescriptor> descriptorMap = new HashMap<String, VulnerabilityDescriptor>();
        Iterator<String> keys = vulnMap.keys();




        while (keys.hasNext()) {
            JSONObject jobj = null;
            String description = null;
            String impact = null;
            Double cvssV2Score = null;
            String cveDate = null;
            List<String> externalLinks = null;
            List<String> altNames = null;
            List<String> patches = null;

            String key = keys.next();
            jobj = vulnMap.getJSONObject(key);
            String cve = jobj.getString("cve");
            altNames = extractStringArray(jobj, "altnames");
            description = jobj.getString("description");
            impact = jobj.getString("impact");
            externalLinks = extractStringArray(jobj, "external_links");
            cvssV2Score = jobj.getDouble("cvssv2");
            patches = extractStringArray(jobj, "patch");
            cveDate = jobj.getString("cvedate");

            new VulnerabilityDescriptor(cve, description, impact, cvssV2Score, cveDate, externalLinks, altNames, patches);

            descriptorMap.put(cve, )
        }

        return descriptorMap;
    }
}
