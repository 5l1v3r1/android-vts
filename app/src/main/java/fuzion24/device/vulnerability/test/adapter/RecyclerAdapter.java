package fuzion24.device.vulnerability.test.adapter;

import android.content.Context;
import android.graphics.Color;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.nowsecure.android.vts.R;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import fuzion24.device.vulnerability.test.VulnerabilityTestResult;
import fuzion24.device.vulnerability.test.adapter.viewholder.RecyclerItemViewHolder;
import fuzion24.device.vulnerability.vulnerabilities.helper.BinaryAssets;

public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

    private List<VulnerabilityTestResult> mResults;
    private Context mContext;

    public RecyclerAdapter(Context context, List<VulnerabilityTestResult> itemList) {
        this.mContext = context;
        this.mResults = itemList;


    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        Context context = parent.getContext();
        View view = LayoutInflater.from(context).inflate(R.layout.vulnerability_layout, parent, false);

        return RecyclerItemViewHolder.newInstance(view);
    }



    private class VulnObject {

    }

    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int position) {
        RecyclerItemViewHolder holder = (RecyclerItemViewHolder) viewHolder;
        VulnerabilityTestResult item = mResults.get(position);

        holder.setItemTestName(item.getCVEorID());


        try {
            jobj = mVulnMap.getJSONObject(item.getCVEorID());


        } catch (Exception e) {
            //We dont have an entry or are missing necessary components of it
            e.printStackTrace();
        }

        if (item.getException() != null) {
            holder.setItemTestResult(mContext.getString(R.string.error_test, item.getException().getMessage()));
            holder.setItemTestResultColor(mContext.getResources().getColor(R.color.orange));
        } else {
            if (item.getResult()) {
                holder.setItemTestResultColor(mContext.getResources().getColor(R.color.red));
                holder.setItemTestResult(mContext.getString(R.string.test_result_failure));
            } else {
                holder.setItemTestResultColor(mContext.getResources().getColor(R.color.green));
                holder.setItemTestResult(mContext.getString(R.string.test_result_success));
            }
        }

        if (!TextUtils.isEmpty(description)) {
            holder.setItemTestResultDescription(description);
            holder.setButtonShowDetailsClickListner(mContext,
                    item.getCVEorID(),
                    altNames,
                    description,
                    impact,
                    externalLinks,
                    patches,
                    cvssV2Score,
                    cveDate);
        } else {
            holder.setItemTestResultDescription(mContext.getString(R.string.information_not_available));

            if (jobj != null) {
                holder.setButtonShowDetailsClickListner(mContext,
                        item.getCVEorID(),
                        altNames,
                        description,
                        impact,
                        externalLinks,
                        patches,
                        cvssV2Score,
                        cveDate);
            } else {
                holder.setButtonShowDetailsClickListner(mContext, item.getCVEorID());
            }
        }

    }

    @Override
    public int getItemCount() {
        return mResults == null ? 0 : mResults.size();
    }

}
