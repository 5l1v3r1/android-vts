package fuzion24.device.vulnerability.test.adapter;

import android.content.Context;
import android.graphics.Color;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.nowsecure.android.vts.R;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import fuzion24.device.vulnerability.test.VulnerabilityTestResult;
import fuzion24.device.vulnerability.test.adapter.viewholder.RecyclerItemViewHolder;
import fuzion24.device.vulnerability.vulnerabilities.helper.BinaryAssets;

public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

    private List<VulnerabilityTestResult> mResults;
    private Context mContext;
    private JSONObject mVulnMap;

    public RecyclerAdapter(Context context, List<VulnerabilityTestResult> itemList) {
        this.mContext = context;
        this.mResults = itemList;

        try {
            String jsonVulns = BinaryAssets.extractAsset(context, "vuln_map.json");
            mVulnMap = new JSONObject(jsonVulns);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        Context context = parent.getContext();
        View view = LayoutInflater.from(context).inflate(R.layout.vulnerability_layout, parent, false);

        return RecyclerItemViewHolder.newInstance(view);
    }

    private List<String> extractStringArray(JSONObject obj, String arrayName) throws Exception {
        JSONArray jsonStringArray = obj.getJSONArray(arrayName);
        List<String> items = new ArrayList<String>();
        for (int i = 0; i < jsonStringArray.length(); i++) {
            items.add(jsonStringArray.getString(i));
        }
        return items;
    }

    private class VulnObject {
        String CVEorID;
        String description;
        String impact;
        String CVSSV2Score;
        String CVEDate;
        String[] externalLinks;
        String[] altNames;
        String[] patches;

        private VulnObject(String cve,
                           String desc,
                           String impact,
                           String cvssv2,
                           String cveDate,
                           String[] externLinks,
                           String[] altNames,
                           String[] patches){
            this.CVEorID = cve;
            this.description = desc;
            this.impact = impact;
            this.CVSSV2Score = cvssv2;
            this.CVEDate = cveDate;
            this.externalLinks = externLinks;
            this.altNames = altNames;
            this.patches = patches;
        }

        public static VulnObject getDescriptorObject(String cve,
                                                     String desc,
                                                     String impact,
                                                     String cvssv2,
                                                     String cveDate,
                                                     String[] externLinks,
                                                     String[] altNames,
                                                     String[] patches){
            VulnObject vo = new VulnObject(cve, desc, impact,cvssv2,cveDate,externLinks,altNames,patches);
            return vo;
        }
    }

    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int position) {
        RecyclerItemViewHolder holder = (RecyclerItemViewHolder) viewHolder;
        VulnerabilityTestResult item = mResults.get(position);

        holder.setItemTestName(item.getCVEorID());

        JSONObject jobj = null;
        String description = null;
        String impact = null;
        Double cvssV2Score = null;
        String cveDate = null;
        List<String> externalLinks = null;
        List<String> altNames = null;
        List<String> patches = null;

        try {
            jobj = mVulnMap.getJSONObject(item.getCVEorID());
            String cve = jobj.getString("cve");
            altNames = extractStringArray(jobj, "altnames");
            description = jobj.getString("description");
            impact = jobj.getString("impact");
            externalLinks = extractStringArray(jobj, "external_links");
            cvssV2Score = jobj.getDouble("cvssv2");
            patches = extractStringArray(jobj, "patch");
            cveDate = jobj.getString("cvedate");

        } catch (Exception e) {
            //We dont have an entry or are missing necessary components of it
            e.printStackTrace();
        }

        if (item.getException() != null) {
            holder.setItemTestResult(mContext.getString(R.string.error_test, item.getException().getMessage()));
            holder.setItemTestResultColor(mContext.getResources().getColor(R.color.orange));
        } else {
            if (item.getResult()) {
                holder.setItemTestResultColor(mContext.getResources().getColor(R.color.red));
                holder.setItemTestResult(mContext.getString(R.string.test_result_failure));
            } else {
                holder.setItemTestResultColor(mContext.getResources().getColor(R.color.green));
                holder.setItemTestResult(mContext.getString(R.string.test_result_success));
            }
        }

        if (!TextUtils.isEmpty(description)) {
            holder.setItemTestResultDescription(description);
            holder.setButtonShowDetailsClickListner(mContext,
                    item.getCVEorID(),
                    altNames,
                    description,
                    impact,
                    externalLinks,
                    patches,
                    cvssV2Score,
                    cveDate);
        } else {
            holder.setItemTestResultDescription(mContext.getString(R.string.information_not_available));

            if (jobj != null) {
                holder.setButtonShowDetailsClickListner(mContext,
                        item.getCVEorID(),
                        altNames,
                        description,
                        impact,
                        externalLinks,
                        patches,
                        cvssV2Score,
                        cveDate);
            } else {
                holder.setButtonShowDetailsClickListner(mContext, item.getCVEorID());
            }
        }

    }

    @Override
    public int getItemCount() {
        return mResults == null ? 0 : mResults.size();
    }

}
