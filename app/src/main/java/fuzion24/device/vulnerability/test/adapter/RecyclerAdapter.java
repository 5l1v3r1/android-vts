package fuzion24.device.vulnerability.test.adapter;

import android.content.Context;
import android.graphics.Color;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.util.Pair;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.nowsecure.android.vts.R;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import fuzion24.device.vulnerability.test.VulnerabilityDescriptor;
import fuzion24.device.vulnerability.test.VulnerabilityTestResult;
import fuzion24.device.vulnerability.test.adapter.viewholder.RecyclerItemViewHolder;
import fuzion24.device.vulnerability.vulnerabilities.helper.BinaryAssets;

public class RecyclerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

    final private List<Pair<VulnerabilityTestResult, VulnerabilityDescriptor>> mResults;
    private Context mContext;

    public RecyclerAdapter(Context context, List<VulnerabilityTestResult> itemList) {
        this.mContext = context;
        Map<String, VulnerabilityDescriptor> vMap = VulnerabilityDescriptor.getParsedVulnMap(context);

        List<Pair<VulnerabilityTestResult, VulnerabilityDescriptor>> res =
                        new ArrayList<Pair<VulnerabilityTestResult, VulnerabilityDescriptor>>();

        for(VulnerabilityTestResult vtr : itemList){
            VulnerabilityDescriptor vd = vMap.get(vtr.getCVEorID());
            res.add(Pair.create(vtr, vd));
        }

        this.mResults = res;

    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        Context context = parent.getContext();
        View view = LayoutInflater.from(context).inflate(R.layout.vulnerability_layout, parent, false);

        return RecyclerItemViewHolder.newInstance(view);
    }
    

    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int position) {
        RecyclerItemViewHolder holder = (RecyclerItemViewHolder) viewHolder;
        Pair<VulnerabilityTestResult, VulnerabilityDescriptor> item = mResults.get(position);

        VulnerabilityTestResult vulnRes = item.first;
        VulnerabilityDescriptor vulnDesc = item.second;

        holder.setItemTestName(vulnRes.getCVEorID());


        if (vulnRes.getException() != null) {
            holder.setItemTestResult(mContext.getString(R.string.error_test, item.getException().getMessage()));
            holder.setItemTestResultColor(mContext.getResources().getColor(R.color.orange));
        } else {
            if (vulnRes.getResult()) {
                holder.setItemTestResultColor(mContext.getResources().getColor(R.color.red));
                holder.setItemTestResult(mContext.getString(R.string.test_result_failure));
            } else {
                holder.setItemTestResultColor(mContext.getResources().getColor(R.color.green));
                holder.setItemTestResult(mContext.getString(R.string.test_result_success));
            }
        }

        holder.setItemTestResultDescription(vulnDesc.getDescription());
        holder.setButtonShowDetailsClickListner(mContext,
                vulnRes.getCVEorID(),
                vulnDesc.getAltNames(),
                vulnDesc.getDescription(),
                vulnDesc.getImpact(),
                vulnDesc.getExternalLinks(),
                vulnDesc.getPatches(),
                vulnDesc.getCVSSV2Score(),
                vulnDesc.getCVEDate());
    }

    @Override
    public int getItemCount() {
        return mResults == null ? 0 : mResults.size();
    }

}
